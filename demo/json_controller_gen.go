package demo

// file generated by
// github.com/mh-cbon/jsoner
// do not edit

import (
	"bytes"
	"encoding/json"
	"io"
	"net/http"
)

// JSONController is jsoner of *Controller.
type JSONController struct {
	embed *Controller
}

// NewJSONController constructs a jsoner of *Controller
func NewJSONController(embed *Controller) *JSONController {
	ret := &JSONController{
		embed: embed,
	}
	return ret
}

// HandleSuccess prints http 200 and prints r.
func (t *JSONController) HandleSuccess(w io.Writer, r io.Reader) error {
	if x, ok := w.(http.ResponseWriter); ok {
		x.WriteHeader(http.StatusOK)
		x.Header().Set("Content-Type", "application/json")
	}
	_, err := io.Copy(w, r)
	return err
}

// GetByID reads json, outputs json.
// the json input must provide a key/value for each params.
func (t *JSONController) GetByID(r *http.Request) (io.Reader, error) {

	ret := new(bytes.Buffer)
	var retErr error

	input := struct {
		id int
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)
	if decErr != nil {
		return nil, decErr
	}

	retVar0 := t.embed.GetByID(input.id)

	out, encErr := json.Marshal([]interface{}{retVar0})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr

}

// UpdateByID reads json, outputs json.
// the json input must provide a key/value for each params.
func (t *JSONController) UpdateByID(GETid int, reqBody io.Reader) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	var decBody Tomate
	decErr := json.NewDecoder(reqBody).Decode(&decBody)
	if decErr != nil {
		return nil, decErr
	}

	retVar1 := t.embed.UpdateByID(GETid, decBody)

	out, encErr := json.Marshal([]interface{}{retVar1})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr
}

// DeleteByID reads json, outputs json.
// the json input must provide a key/value for each params.
func (t *JSONController) DeleteByID(reqID int) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	retVar2 := t.embed.DeleteByID(reqID)

	out, encErr := json.Marshal([]interface{}{retVar2})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr
}
