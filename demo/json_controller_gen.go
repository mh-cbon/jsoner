package demo

// file generated by
// github.com/mh-cbon/jsoner
// do not edit

import (
	"bytes"
	"encoding/json"
	"io"
)

// JSONController is jsoner of *Controller.
type JSONController struct {
	embed *Controller
}

// NewJSONController constructs a jsoner of *Controller
func NewJSONController(embed *Controller) *JSONController {
	ret := &JSONController{
		embed: embed,
	}
	return ret
}

// GetByID reads json, outputs json.
// the json input must provide a key/value for each params.
func (t *JSONController) GetByID(args io.Reader) (io.Reader, error) {

	var ret io.Reader
	var retErr error

	input := struct {
		id int
	}{}
	decErr := json.NewDecoder(args).Decode(&input)
	if decErr != nil {
		return nil, decErr
	}
	retVar0 := t.embed.GetByID(input.id)

	out, encErr := json.Marshal([]interface{}{retVar0})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr

}

// UpdateByID reads json, outputs json.
// the json input must provide a key/value for each params.
func (t *JSONController) UpdateByID(args io.Reader) (io.Reader, error) {

	var ret io.Reader
	var retErr error

	input := struct {
		id      int
		reqBody Tomate
	}{}
	decErr := json.NewDecoder(args).Decode(&input)
	if decErr != nil {
		return nil, decErr
	}
	retVar1 := t.embed.UpdateByID(input.id, input.reqBody)

	out, encErr := json.Marshal([]interface{}{retVar1})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr

}

// DeleteByID reads json, outputs json.
// the json input must provide a key/value for each params.
func (t *JSONController) DeleteByID(reqID int) (io.Reader, error) {
	var ret io.Reader
	var retErr error

	retVar2 := t.embed.DeleteByID(reqID)

	out, encErr := json.Marshal([]interface{}{retVar2})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr
}
