package main

// file generated by
// github.com/mh-cbon/jsoner
// do not edit

import (
	"bytes"
	"encoding/json"
	jsoner "github.com/mh-cbon/jsoner/lib"
	"io"
	"net/http"
)

// ControllerJSONGen is jsoner of *Controller.
// Controller of some resources.
type ControllerJSONGen struct {
	embed     *Controller
	finalizer jsoner.Finalizer
}

// NewControllerJSONGen constructs a jsoner of *Controller
func NewControllerJSONGen(embed *Controller, finalizer jsoner.Finalizer) *ControllerJSONGen {
	if finalizer == nil {
		finalizer = &jsoner.JSONFinalizer{}
	}
	ret := &ControllerJSONGen{
		embed:     embed,
		finalizer: finalizer,
	}
	return ret
}

//UnmarshalJSON JSON unserializes ControllerJSONGen
func (t *ControllerJSONGen) UnmarshalJSON(b []byte) error {
	var embed *Controller
	if err := json.Unmarshal(b, &embed); err != nil {
		return err
	}
	t.embed = embed
	return nil
}

//MarshalJSON JSON serializes ControllerJSONGen
func (t *ControllerJSONGen) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.embed)
}

// GetByName Decodes r as json to invoke *Controller.GetByName.
// GetByName ...
func (t *ControllerJSONGen) GetByName(r *http.Request) (io.Reader, error) {

	ret := new(bytes.Buffer)
	var retErr error
	input := struct {
		Arg0 string
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)
	if decErr != nil {
		return nil, decErr
	}

	retVar0 := t.embed.GetByName(input.Arg0)

	output := struct {
		Arg0 Tomate
	}{
		Arg0: retVar0,
	}

	outBytes, encErr := json.Marshal(output)
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(outBytes)
		ret = &b
	}

	return ret, retErr

}

// UpdateByName Decodes reqBody as json to invoke *Controller.UpdateByName.
// Other parameters are passed straight
// UpdateByName ...
func (t *ControllerJSONGen) UpdateByName(GETname string, reqBody io.Reader) (io.Reader, error) {

	ret := new(bytes.Buffer)
	var retErr error

	var decBody Tomate
	decErr := json.NewDecoder(reqBody).Decode(&decBody)
	if decErr != nil {
		return nil, decErr
	}
	retVar1 := t.embed.UpdateByName(GETname, decBody)

	out, encErr := json.Marshal([]interface{}{retVar1})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr

}

// DeleteByName Decodes reqBody as json to invoke *Controller.DeleteByName.
// Other parameters are passed straight
// DeleteByName ...
func (t *ControllerJSONGen) DeleteByName(reqName string) (io.Reader, error) {

	ret := new(bytes.Buffer)
	var retErr error

	retVar2 := t.embed.DeleteByName(reqName)

	out, encErr := json.Marshal([]interface{}{retVar2})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr

}
